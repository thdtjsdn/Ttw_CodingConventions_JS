//----------------------------------------------------------------------------------------------------;
break - 루프(for, for..in, for each..in, do..while 또는 while) 내에 나타나거나 switch 문 내의 특정 case와 연관된 명령문 블록 내에 나타납니다.
case - switch 문의 이동 대상을 정의합니다.
continue - 가장 안쪽의 루프에 남아 있는 명령문을 모두 건너뛰고 제어가 정상적으로 루프의 끝에 전달된 것처럼 루프의 다음 반복을 시작합니다.
default - switch 문에 대한 기본 case를 정의합니다.
do..while - 조건을 처음 평가하기 전에 명령문이 한 번 실행된다는 점을 제외하고는 while 루프와 유사합니다.
else - if 문의 조건이 false를 반환하는 경우 실행할 명령문을 지정합니다.
for - init(초기화) 표현식을 한 번 평가한 다음 루핑 시퀀스를 시작합니다.
for..in - 객체의 동적 속성이나 배열 요소를 반복 실행하고 각 속성이나 요소에 대해 statement를 실행합니다.
if - 조건을 평가하여 다음에 실행할 명령문을 결정합니다.
return - 실행 시에 호출하는 함수에 즉시 반환됩니다.
switch - 표현식의 값에 따라 여러 명령문 중 하나에 제어가 전달됩니다.
throw catch - 코드 블록이 처리할 수 있거나 catch할 수 있는 오류를 생성하거나 throw합니다.
try..catch..finally - 오류가 발생할 수 있는 코드 블록을 포함하고 오류에 대응합니다.
while - 조건을 평가하고 조건이 true로 평가되면 하나 이상의 명령문을 실행한 후 루프로 돌아가서 조건을 다시 평가합니다.
with - 명령문을 실행하는 데 사용할 기본 객체를 만듭니다. 이 객체를 사용하면 작성해야 하는 코드의 양을 줄일 수 있습니다.
//----------------------------------------------------------------------------------------------------;

var a = [];
var io;
var i=0, iLen=a.length;
for( ; i<iLen; ++i )
{
	io = a[ i ];
	//...;
}

//----------------------------------------------------------------------------------------------------;

var a = [];
var io;
var i=0, iLen=a.length;
for( ; i<iLen; ++i )
{
	io = a[ i ];
	//...;

	var jo;
	var j=0, jLen=a[ i ].length;
	for( ; j<jLen; ++j )
	{
		jo = io[ j ];
		//...;
	}
}

//----------------------------------------------------------------------------------------------------;